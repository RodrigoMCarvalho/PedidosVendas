//PACKAGE BR.COM.PEDIDOVENDA.UTIL.CDI;
//
//
////	IMPORT JAVA.LANG.ANNOTATION.ANNOTATION;
//	IMPORT JAVA.UTIL.MAP;
//	IMPORT JAVA.UTIL.CONCURRENT.CONCURRENTHASHMAP;
//	IMPORT JAVAX.ENTERPRISE.CONTEXT.CONTEXTNOTACTIVEEXCEPTION;
//	IMPORT JAVAX.ENTERPRISE.CONTEXT.SPI.CONTEXT;
//	IMPORT JAVAX.ENTERPRISE.CONTEXT.SPI.CONTEXTUAL;
//	IMPORT JAVAX.ENTERPRISE.CONTEXT.SPI.CREATIONALCONTEXT;
//	IMPORT JAVAX.FACES.BEAN.VIEWSCOPED;
//	IMPORT JAVAX.FACES.COMPONENT.UIVIEWROOT;
//	IMPORT JAVAX.FACES.CONTEXT.FACESCONTEXT;
//	IMPORT JAVAX.FACES.EVENT.PREDESTROYVIEWMAPEVENT;
//	IMPORT JAVAX.FACES.EVENT.SYSTEMEVENT;
//	IMPORT JAVAX.FACES.EVENT.SYSTEMEVENTLISTENER;
//
//	/**
//	 * COPIED FROM SEAM FACES 3.1.0.
//	 *
//	 * @AUTHOR STEVE TAYLOR
//	 */
//	PUBLIC CLASS VIEWSCOPEDCONTEXT IMPLEMENTS CONTEXT, SYSTEMEVENTLISTENER
//	{
//		@OVERRIDE
//		PUBLIC <T> T GET(FINAL CONTEXTUAL<T> COMPONENT)
//		{
//			ASSERTACTIVE();
//
//			IF (!ISJSFSUBSCRIBED)
//			{
//				FACESCONTEXT.GETCURRENTINSTANCE().GETAPPLICATION().SUBSCRIBETOEVENT(PREDESTROYVIEWMAPEVENT.CLASS, THIS);
//				ISJSFSUBSCRIBED = TRUE;
//			}
//
//			T INSTANCE = (T) GETCOMPONENTINSTANCEMAP().GET(COMPONENT);
//
//			RETURN INSTANCE;
//		}
//
//		@OVERRIDE
//		PUBLIC <T> T GET(FINAL CONTEXTUAL<T> COMPONENT, FINAL CREATIONALCONTEXT<T> CREATIONALCONTEXT)
//		{
//			ASSERTACTIVE();
//
//			T INSTANCE = GET(COMPONENT);
//			IF (INSTANCE == NULL)
//			{
//				IF (CREATIONALCONTEXT != NULL)
//				{
//					MAP<CONTEXTUAL<?>, OBJECT> COMPONENTINSTANCEMAP = GETCOMPONENTINSTANCEMAP();
//					MAP<CONTEXTUAL<?>, CREATIONALCONTEXT<?>> CREATIONALCONTEXTMAP = GETCREATIONALINSTANCEMAP();
//
//					SYNCHRONIZED (COMPONENTINSTANCEMAP)
//					{
//						INSTANCE = (T) COMPONENTINSTANCEMAP.GET(COMPONENT);
//						IF (INSTANCE == NULL)
//						{
//							INSTANCE = COMPONENT.CREATE(CREATIONALCONTEXT);
//							IF (INSTANCE != NULL)
//							{
//								COMPONENTINSTANCEMAP.PUT(COMPONENT, INSTANCE);
//								CREATIONALCONTEXTMAP.PUT(COMPONENT, CREATIONALCONTEXT);
//							}
//						}
//					}
//				}
//			}
//
//			RETURN INSTANCE;
//		}
//
//		@OVERRIDE
//		PUBLIC CLASS<? EXTENDS ANNOTATION> GETSCOPE()
//		{
//			RETURN VIEWSCOPED.CLASS;
//		}
//
//		@OVERRIDE
//		PUBLIC BOOLEAN ISACTIVE()
//		{
//			RETURN GETVIEWROOT() != NULL;
//		}
//
//		PRIVATE VOID ASSERTACTIVE()
//		{
//			IF (!ISACTIVE())
//			{
//				THROW NEW CONTEXTNOTACTIVEEXCEPTION(
//						"SEAM CONTEXT WITH SCOPE ANNOTATION @VIEWSCOPED IS NOT ACTIVE WITH RESPECT TO THE CURRENT THREAD");
//			}
//		}
//
//		@OVERRIDE
//		PUBLIC BOOLEAN ISLISTENERFORSOURCE(FINAL OBJECT SOURCE)
//		{
//			IF (SOURCE INSTANCEOF UIVIEWROOT)
//			{
//				RETURN TRUE;
//			}
//
//			RETURN FALSE;
//		}
//
//		/**
//		 * WE GET PREDESTROYVIEWMAPEVENT EVENTS FROM THE JSF SERVLET AND DESTROY OUR CONTEXTUAL INSTANCES. THIS SHOULD (THEORETICALLY!) ALSO GET FIRED IF THE WEBAPP CLOSES, SO THERE SHOULD BE NO NEED TO
//		 * MANUALLY TRACK ALL VIEW SCOPES AND DESTROY THEM AT A SHUTDOWN.
//		 *
//		 * @SEE JAVAX.FACES.EVENT.SYSTEMEVENTLISTENER#PROCESSEVENT(JAVAX.FACES.EVENT.SYSTEMEVENT)
//		 */
//		@OVERRIDE
//		PUBLIC VOID PROCESSEVENT(FINAL SYSTEMEVENT EVENT)
//		{
//			IF (EVENT INSTANCEOF PREDESTROYVIEWMAPEVENT)
//			{
//				MAP<CONTEXTUAL<?>, OBJECT> COMPONENTINSTANCEMAP = GETCOMPONENTINSTANCEMAP();
//				MAP<CONTEXTUAL<?>, CREATIONALCONTEXT<?>> CREATIONALCONTEXTMAP = GETCREATIONALINSTANCEMAP();
//
//				IF (COMPONENTINSTANCEMAP != NULL)
//				{
//					FOR (MAP.ENTRY<CONTEXTUAL<?>, OBJECT> COMPONENTENTRY : COMPONENTINSTANCEMAP.ENTRYSET())
//					{
//						/*
//						 * NO WAY TO INFORM THE COMPILER OF TYPE <T> INFORMATION, SO IT HAS TO BE ABANDONED HERE :(
//						 */
//						CONTEXTUAL CONTEXTUAL = COMPONENTENTRY.GETKEY();
//						OBJECT INSTANCE = COMPONENTENTRY.GETVALUE();
//						CREATIONALCONTEXT CREATIONAL = CREATIONALCONTEXTMAP.GET(CONTEXTUAL);
//
//						CONTEXTUAL.DESTROY(INSTANCE, CREATIONAL);
//					}
//				}
//			}
//		}
//
//		PROTECTED UIVIEWROOT GETVIEWROOT()
//		{
//			FACESCONTEXT CONTEXT = FACESCONTEXT.GETCURRENTINSTANCE();
//
//			IF (CONTEXT != NULL)
//			{
//				RETURN CONTEXT.GETVIEWROOT();
//			}
//
//			RETURN NULL;
//		}
//
//		PROTECTED MAP<STRING, OBJECT> GETVIEWMAP()
//		{
//			UIVIEWROOT VIEWROOT = GETVIEWROOT();
//
//			IF (VIEWROOT != NULL)
//			{
//				RETURN VIEWROOT.GETVIEWMAP(TRUE);
//			}
//
//			RETURN NULL;
//		}
//
//		@SUPPRESSWARNINGS("UNCHECKED")
//		PRIVATE MAP<CONTEXTUAL<?>, OBJECT> GETCOMPONENTINSTANCEMAP()
//		{
//			MAP<STRING, OBJECT> VIEWMAP = GETVIEWMAP();
//			MAP<CONTEXTUAL<?>, OBJECT> MAP = (CONCURRENTHASHMAP<CONTEXTUAL<?>, OBJECT>) VIEWMAP.GET(COMPONENT_MAP_NAME);
//
//			IF (MAP == NULL)
//			{
//				MAP = NEW CONCURRENTHASHMAP<CONTEXTUAL<?>, OBJECT>();
//				VIEWMAP.PUT(COMPONENT_MAP_NAME, MAP);
//			}
//
//			RETURN MAP;
//		}
//
//		@SUPPRESSWARNINGS("UNCHECKED")
//		PRIVATE MAP<CONTEXTUAL<?>, CREATIONALCONTEXT<?>> GETCREATIONALINSTANCEMAP()
//		{
//			MAP<STRING, OBJECT> VIEWMAP = GETVIEWMAP();
//			MAP<CONTEXTUAL<?>, CREATIONALCONTEXT<?>> MAP = (MAP<CONTEXTUAL<?>, CREATIONALCONTEXT<?>>) VIEWMAP.GET(CREATIONAL_MAP_NAME);
//
//			IF (MAP == NULL)
//			{
//				MAP = NEW CONCURRENTHASHMAP<CONTEXTUAL<?>, CREATIONALCONTEXT<?>>();
//				VIEWMAP.PUT(CREATIONAL_MAP_NAME, MAP);
//			}
//
//			RETURN MAP;
//		}
//
//		PRIVATE FINAL STATIC STRING COMPONENT_MAP_NAME = "ORG.JBOSS.SEAM.FACES.VIEWSCOPE.COMPONENTINSTANCEMAP";
//
//		PRIVATE FINAL STATIC STRING CREATIONAL_MAP_NAME = "ORG.JBOSS.SEAM.FACES.VIEWSCOPE.CREATIONALINSTANCEMAP";
//
//		PRIVATE BOOLEAN ISJSFSUBSCRIBED = FALSE;
//	}
